package todo.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import todo.dto.Todo;
import todo.dto.TodoMember;
import todo.service.TodoService;

@RestController
public class TodoController {
	
	@Autowired
	private TodoService service;
	
	
	/** 아이디 중복 검사
	 *  @Param id
	 *  @Return 중복 : 1, 사용가능 : 0
	 *  중복 = select Count 했을 때 만약에 사용하고자 하는 아이디가 존재하면 count값이 1로 넘어오고
	 *  사용하고자 하는 아이디가 DB에 존재하지 않으면 0
	 */
	@GetMapping("/idCheck")
	public int idCheck(@RequestParam("id") String id) {
		return service.idCheck(id);
	}
	
	/** 회원 가입
	 * @Param member
	 * @Return 성공 : 1, 실패 : 0
	 * */
	@PostMapping("/signup")
	public int signup(@RequestBody TodoMember member) {
		return service.signup(member);
	}
	
	/** 로그인
	 * @param member
	 * @Return 성공 : 회원정보 / todoList, 실패 : null
	 * */
	@PostMapping("/login")
	public Map<String, Object> login(@RequestBody TodoMember member) {
		return service.login(member);
	}
	
	/** 할일 추가
	 * @Param todo
	 * @Return 성공 1 : 실패 0
	 * */
	@PostMapping("/todo")
	public int insert(@RequestBody Todo todo) {
		return service.insert(todo);
	}
	
	
	/** 할일 수정
	 * @Param todo
	 * @Return 성공 1 : 실패 0
	 * update 수정 @PutMapping 사용 
	 * @PostMapping을 사용해도 되긴 함
	 * */
	@PutMapping("/todo")
	public int update(@RequestBody Todo todo) {
		return service.update(todo);
	}
	
	/** 할일 삭제
	 * @Param todoNo
	 * @Return 성공 1 : 실패 0
	 * delete 삭제의 경우 @DeleteMapping 사용
	 * @PostMapping 을 사용해도 문제 없음
	 * */
	@DeleteMapping("/todo")
	public int delete(@RequestBody int todoNO) {
		return service.delete(todoNO);
	}
	
	
	
	
	
	
}
